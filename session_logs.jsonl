{"session_id": "session_1755761554297_tg35rfbrr", "user_id": "", "task": "unselected", "timingData": {"versionGraph": [], "chat": [], "p5Editor": []}, "usageData": {"totalVersions": 8, "versionConversations": {}, "previewClicks": 0, "actionCounts": {"delete": 0, "modify": 0, "merge": 0, "duplicate": 0}, "versionCodes": {"1-0": "function setup() {\n  createCanvas(635, 720);\n}\n\nfunction draw() {\n  background(220);\n}", "2-0": "function setup() {\n  createCanvas(635, 720);\n}\n\nlet balls = [];\nlet bgColors = [];\nlet colorIndex = 0;\n\nfunction draw() {\n  // Create a gradient background by blending colors\n  if (bgColors.length < 2) {\n    bgColors.push(color(random(255), random(255), random(255)));\n  }\n  let c1 = bgColors[0];\n  let c2 = bgColors[1];\n  for (let i = 0; i < height; i++) {\n    let inter = map(i, 0, height, 0, 1);\n    let c = lerpColor(c1, c2, inter);\n    stroke(c);\n    line(0, i, width, i);\n  }\n\n  if (frameCount % 60 === 0) {\n    bgColors[0] = bgColors[1];\n    bgColors[1] = color(random(255), random(255), random(255));\n  }\n\n  // Handle balls\n  if (balls.length < 10) {\n    balls.push(new Ball(random(width), random(height)));\n  }\n  for (let ball of balls) {\n    ball.update();\n    ball.display();\n  }\n}\n\nclass Ball {\n  constructor(x, y) {\n    this.x = x;\n    this.y = y;\n    this.xSpeed = random(-2, 2);\n    this.ySpeed = random(-2, 2);\n    this.size = 20;\n    this.color = color(random(255), random(255), random(255));\n  }\n  \n  update() {\n    this.x += this.xSpeed;\n    this.y += this.ySpeed;\n\n    if (this.x < 0 || this.x > width) {\n      this.xSpeed *= -1;\n    }\n    if (this.y < 0 || this.y > height) {\n      this.ySpeed *= -1;\n    }\n  }\n  \n  display() {\n    fill(this.color);\n    ellipse(this.x, this.y, this.size);\n  }\n}", "3-0": "function setup() {\n  createCanvas(635, 720);\n}\n\nlet balls = [];\n\nfunction draw() {\n  background(220);\n  if (balls.length < 10) {\n    balls.push(new Ball(random(width), random(height)));\n  }\n  for (let ball of balls) {\n    ball.update();\n    ball.display();\n  }\n}\n\nclass Ball {\n  constructor(x, y) {\n    this.x = x;\n    this.y = y;\n    this.xSpeed = random(-2, 2);\n    this.ySpeed = random(-2, 2);\n    this.size = 20;\n    this.color = color(random(255), random(255), random(255));\n  }\n  \n  update() {\n    this.x += this.xSpeed;\n    this.y += this.ySpeed;\n\n    if (this.x < 0 || this.x > width) {\n      this.xSpeed *= -1;\n    }\n    if (this.y < 0 || this.y > height) {\n      this.ySpeed *= -1;\n    }\n  }\n  \n  display() {\n    fill(this.color);\n    ellipse(this.x, this.y, this.size);\n  }\n}", "2-1": "function setup() {\n  createCanvas(635, 720, WEBGL);\n}\n\nfunction draw() {\n  background(220);\n  \n  // 环境光\n  ambientLight(60, 60, 60);\n  // 定向光\n  let dirX = (mouseX / width - 0.5) * 2;\n  let dirY = (mouseY / height - 0.5) * 2;\n  directionalLight(250, 250, 250, -dirX, -dirY, -1);\n  \n  noStroke();\n  specularMaterial(250);\n  shininess(50);\n  \n  translate(0, 0, 0);\n  rotateX(frameCount * 0.01);\n  rotateY(frameCount * 0.01);\n  \n  box(150);\n}", "merge-4-0.50": "let balls = [];\n\nfunction setup() {\n  createCanvas(635, 720, WEBGL);\n}\n\nfunction draw() {\n  background(220);\n  \n  // 环境光\n  ambientLight(60, 60, 60);\n  // 定向光\n  let dirX = (mouseX / width - 0.5) * 2;\n  let dirY = (mouseY / height - 0.5) * 2;\n  directionalLight(250, 250, 250, -dirX, -dirY, -1);\n  \n  noStroke();\n  specularMaterial(250);\n  shininess(50);\n  \n  translate(0, 0, 0);\n  rotateX(frameCount * 0.01);\n  rotateY(frameCount * 0.01);\n  \n  box(150);\n  \n  // 绘制漂浮小球\n  if (balls.length < 10) {\n    balls.push(new Ball(random(width), random(height)));\n  }\n  for (let ball of balls) {\n    ball.update();\n    ball.display();\n  }\n}\n\nclass Ball {\n  constructor(x, y) {\n    this.x = x - width / 2; // 调整坐标以适应WEBGL\n    this.y = y - height / 2;\n    this.xSpeed = random(-2, 2);\n    this.ySpeed = random(-2, 2);\n    this.size = 20;\n    this.color = color(random(255), random(255), random(255));\n  }\n  \n  update() {\n    this.x += this.xSpeed;\n    this.y += this.ySpeed;\n\n    if (this.x < -width / 2 || this.x > width / 2) {\n      this.xSpeed *= -1;\n    }\n    if (this.y < -height / 2 || this.y > height / 2) {\n      this.ySpeed *= -1;\n    }\n  }\n  \n  display() {\n    push();\n    translate(this.x, this.y, 0);\n    fill(this.color);\n    sphere(this.size / 2); // 使用球体代替平面圆形\n    pop();\n  }\n}\n", "4-2": "function setup() {\n  createCanvas(635, 720);\n}\n\nlet balls = [];\n\nfunction draw() {\n  background(220);\n  if (balls.length < 10) {\n    balls.push(new Ball(random(width), random(height)));\n  }\n  for (let ball of balls) {\n    ball.update();\n    ball.display();\n  }\n}\n\nclass Ball {\n  constructor(x, y) {\n    this.x = x;\n    this.y = y;\n    this.xSpeed = random(-2, 2);\n    this.ySpeed = random(-2, 2);\n    this.size = 20;\n    this.color = color(random(255), random(255), random(255));\n  }\n  \n  update() {\n    this.x += this.xSpeed;\n    this.y += this.ySpeed;\n\n    if (this.x < 0 || this.x > width) {\n      this.xSpeed *= -1;\n    }\n    if (this.y < 0 || this.y > height) {\n      this.ySpeed *= -1;\n    }\n  }\n  \n  display() {\n    fill(this.color);\n    ellipse(this.x, this.y, this.size);\n  }\n}", "4-3": "function setup() {\n  createCanvas(635, 720);\n}\n\nlet balls = [];\n\nfunction draw() {\n  background(220);\n  if (balls.length < 10) {\n    balls.push(new Ball(random(width), random(height)));\n  }\n  for (let ball of balls) {\n    ball.update();\n    ball.display();\n  }\n}\n\nclass Ball {\n  constructor(x, y) {\n    this.x = x;\n    this.y = y;\n    this.xSpeed = random(-2, 2);\n    this.ySpeed = random(-2, 2);\n    this.size = 20;\n    this.color = color(random(255), random(255), random(255));\n  }\n  \n  update() {\n    this.x += this.xSpeed;\n    this.y += this.ySpeed;\n\n    if (this.x < 0 || this.x > width) {\n      this.xSpeed *= -1;\n    }\n    if (this.y < 0 || this.y > height) {\n      this.ySpeed *= -1;\n    }\n  }\n  \n  display() {\n    fill(this.color);\n    ellipse(this.x, this.y, this.size);\n  }\n}", "5-2": "function setup() {\n  createCanvas(635, 720);\n}\n\nlet balls = [];\n\nfunction draw() {\n  background(220);\n  if (balls.length < 10) {\n    balls.push(new Ball(random(width), random(height)));\n  }\n  for (let ball of balls) {\n    ball.update();\n    ball.display();\n  }\n}\n\nclass Ball {\n  constructor(x, y) {\n    this.x = x;\n    this.y = y;\n    this.xSpeed = random(-2, 2);\n    this.ySpeed = random(-2, 2);\n    this.size = 20;\n    this.color = color(random(255), random(255), random(255));\n  }\n  \n  update() {\n    this.x += this.xSpeed;\n    this.y += this.ySpeed;\n\n    if (this.x < 0 || this.x > width) {\n      this.xSpeed *= -1;\n    }\n    if (this.y < 0 || this.y > height) {\n      this.ySpeed *= -1;\n    }\n  }\n  \n  display() {\n    fill(this.color);\n    ellipse(this.x, this.y, this.size);\n  }\n}"}}}
{"session_id": "session_1755761945493_241yvqzhg", "user_id": "", "task": "TaskB: Reflection", "timingData": {"versionGraph": [{"start": 1755761950294, "end": 1755761966743, "duration": 16449}, {"start": 1755761966986, "end": 1755761971242, "duration": 4256}, {"start": 1755761973180, "end": 1755761978317, "duration": 5137}, {"start": 1755761983011, "end": 1755761984469, "duration": 1458}, {"start": 1755761984691, "end": 1755761985122, "duration": 431}, {"start": 1755762033619, "end": 1755762033738, "duration": 119}, {"start": 1755762034390, "end": 1755762035070, "duration": 680}, {"start": 1755762044173, "end": 1755762045881, "duration": 1708}, {"start": 1755762047450, "end": 1755762054110, "duration": 6660}, {"start": 1755762149777, "end": 1755762149805, "duration": 28}, {"start": 1755762157324, "end": 1755762160199, "duration": 2875}, {"start": 1755762164191, "end": 1755762166157, "duration": 1966}, {"start": 1755762173391, "end": 1755762176765, "duration": 3374}, {"start": 1755762177203, "end": 1755762180959, "duration": 3756}, {"start": 1755762194949, "end": 1755762194972, "duration": 23}, {"start": 1755762195572, "end": 1755762198410, "duration": 2838}, {"start": 1755762214562, "end": 1755762230141, "duration": 15579}, {"start": 1755762268066, "end": 1755762273736, "duration": 5670}, {"start": 1755762289281, "end": 1755762289393, "duration": 112}, {"start": 1755762338443, "end": 1755762342177, "duration": 3734}, {"start": 1755762345688, "end": 1755762345752, "duration": 64}, {"start": 1755762455983, "end": 1755762456114, "duration": 131}], "chat": [{"start": 1755761949677, "end": 1755761950292, "duration": 615}, {"start": 1755761966945, "end": 1755761966972, "duration": 27}, {"start": 1755761972548, "end": 1755761972742, "duration": 194}, {"start": 1755761973020, "end": 1755761973103, "duration": 83}, {"start": 1755762035426, "end": 1755762035612, "duration": 186}, {"start": 1755762036362, "end": 1755762036389, "duration": 27}, {"start": 1755762151069, "end": 1755762151091, "duration": 22}, {"start": 1755762151250, "end": 1755762151306, "duration": 56}, {"start": 1755762151367, "end": 1755762151411, "duration": 44}, {"start": 1755762152159, "end": 1755762152207, "duration": 48}, {"start": 1755762163011, "end": 1755762163122, "duration": 111}, {"start": 1755762168823, "end": 1755762170690, "duration": 1867}, {"start": 1755762172058, "end": 1755762172114, "duration": 56}, {"start": 1755762198794, "end": 1755762198810, "duration": 16}, {"start": 1755762198914, "end": 1755762199817, "duration": 903}, {"start": 1755762264045, "end": 1755762264133, "duration": 88}, {"start": 1755762264420, "end": 1755762265188, "duration": 768}, {"start": 1755762289187, "end": 1755762289273, "duration": 86}], "p5Editor": [{"start": 1755761966764, "end": 1755761966944, "duration": 180}, {"start": 1755761971250, "end": 1755761972548, "duration": 1298}, {"start": 1755761972742, "end": 1755761973013, "duration": 271}, {"start": 1755761978324, "end": 1755761982844, "duration": 4520}, {"start": 1755762033746, "end": 1755762034369, "duration": 623}, {"start": 1755762035106, "end": 1755762035425, "duration": 319}, {"start": 1755762036390, "end": 1755762036542, "duration": 152}, {"start": 1755762043013, "end": 1755762044145, "duration": 1132}, {"start": 1755762045895, "end": 1755762047429, "duration": 1534}, {"start": 1755762150014, "end": 1755762150430, "duration": 416}, {"start": 1755762151062, "end": 1755762151069, "duration": 7}, {"start": 1755762151091, "end": 1755762151250, "duration": 159}, {"start": 1755762151306, "end": 1755762151367, "duration": 61}, {"start": 1755762151411, "end": 1755762151416, "duration": 5}, {"start": 1755762152152, "end": 1755762152159, "duration": 7}, {"start": 1755762152207, "end": 1755762152454, "duration": 247}, {"start": 1755762156269, "end": 1755762157269, "duration": 1000}, {"start": 1755762163734, "end": 1755762164177, "duration": 443}, {"start": 1755762172774, "end": 1755762173349, "duration": 575}, {"start": 1755762195382, "end": 1755762195542, "duration": 160}, {"start": 1755762200027, "end": 1755762200432, "duration": 405}, {"start": 1755762208444, "end": 1755762209836, "duration": 1392}, {"start": 1755762267477, "end": 1755762268019, "duration": 542}, {"start": 1755762273752, "end": 1755762274129, "duration": 377}, {"start": 1755762288881, "end": 1755762289187, "duration": 306}, {"start": 1755762338276, "end": 1755762338427, "duration": 151}, {"start": 1755762345529, "end": 1755762345680, "duration": 151}]}, "usageData": {"totalVersions": 8, "versionConversations": {"2-0": [{"operationName": "duplicate", "userPrompt": "Duplicate from version 1.0 (ID: 1-0)", "mode": "none", "aiResponse": "none", "timestamp": "2025-08-21T07:39:14.367Z"}], "2--1": [{"operationName": "duplicate", "userPrompt": "Duplicate from version 1.0 (ID: 1-0)", "mode": "none", "aiResponse": "none", "timestamp": "2025-08-21T07:39:16.576Z"}], "2-1": [{"operationName": "duplicate", "userPrompt": "Duplicate from version 1.0 (ID: 1-0)", "mode": "none", "aiResponse": "none", "timestamp": "2025-08-21T07:39:18.540Z"}], "2--2": [{"operationName": "duplicate", "userPrompt": "Duplicate from version 1.0 (ID: 1-0)", "mode": "none", "aiResponse": "none", "timestamp": "2025-08-21T07:39:20.828Z"}], "2-2": [{"operationName": "duplicate", "userPrompt": "Duplicate from version 1.0 (ID: 1-0)", "mode": "none", "aiResponse": "none", "timestamp": "2025-08-21T07:39:22.995Z"}], "3-0": [{"operationName": "duplicate", "userPrompt": "New node. Duplicate from version 1.1 (ID: 2-0) on save", "mode": "none", "aiResponse": "none", "timestamp": "2025-08-21T07:40:47.060Z"}], "3-1": [{"operationName": "duplicate", "userPrompt": "Duplicate from version 3.0 (ID: 2-1)", "mode": "none", "aiResponse": "none", "timestamp": "2025-08-21T07:44:30.617Z"}]}, "previewClicks": 20, "actionCounts": {"delete": 0, "modify": 8, "merge": 0, "duplicate": 6}, "versionCodes": {"1-0": "function setup() {\n  createCanvas(635, 720);\n}\n\nfunction draw() {\n  background(220);\n}", "2-0": "function setup() {\n  createCanvas(635, 720);\n}\n\nfunction draw() {\n  background(220);\n}", "2--1": "function setup() {\n  createCanvas(635, 720);\n}\n\nfunction draw() {\n  background(220);\n}", "2-1": "function setup() {\n  createCanvas(635, 720);\n}\n\nfunction draw() {\n  background(220);\n}", "2--2": "function setup() {\n  createCanvas(635, 720);\n}\n\nfunction draw() {\n  background(220);\n}", "2-2": "function setup() {\n  createCanvas(635, 720);\n}\n\nfunction draw() {\n  background(220);\n}", "3-0": "function setup() {\n  createCanvas(635, 720);\n}\n\nfunction draw() {\n  background(220);\n}", "3-1": "function setup() {\n  createCanvas(635, 720);\n}\n\nfunction draw() {\n  background(220);\n}"}}}
{"session_id": "session_1755766206147_9mzr86df4", "user_id": "", "task": "TaskB: Reflection", "timingData": {"versionGraph": [{"start": 1755766305421, "end": 1755766309440, "duration": 4019}, {"start": 1755766318356, "end": 1755766319232, "duration": 876}, {"start": 1755766319335, "end": 1755766320640, "duration": 1305}, {"start": 1755766326666, "end": 1755766339803, "duration": 13137}, {"start": 1755766340039, "end": 1755766340053, "duration": 14}, {"start": 1755766344309, "end": 1755766351127, "duration": 6818}, {"start": 1755766352641, "end": 1755766355078, "duration": 2437}, {"start": 1755766359563, "end": 1755766374720, "duration": 15157}, {"start": 1755766382365, "end": 1755766382982, "duration": 617}, {"start": 1755766383385, "end": 1755766384190, "duration": 805}, {"start": 1755766384968, "end": 1755766385287, "duration": 319}], "chat": [{"start": 1755766310482, "end": 1755766310621, "duration": 139}, {"start": 1755766312428, "end": 1755766312509, "duration": 81}, {"start": 1755766321355, "end": 1755766322820, "duration": 1465}, {"start": 1755766355300, "end": 1755766356327, "duration": 1027}, {"start": 1755766359286, "end": 1755766359347, "duration": 61}, {"start": 1755766384238, "end": 1755766384954, "duration": 716}], "p5Editor": [{"start": 1755766309441, "end": 1755766310482, "duration": 1041}, {"start": 1755766310621, "end": 1755766310628, "duration": 7}, {"start": 1755766312419, "end": 1755766312427, "duration": 8}, {"start": 1755766312509, "end": 1755766318335, "duration": 5826}, {"start": 1755766320661, "end": 1755766321349, "duration": 688}, {"start": 1755766322821, "end": 1755766322890, "duration": 69}, {"start": 1755766322924, "end": 1755766326653, "duration": 3729}, {"start": 1755766351189, "end": 1755766352453, "duration": 1264}, {"start": 1755766355092, "end": 1755766355300, "duration": 208}, {"start": 1755766356335, "end": 1755766359286, "duration": 2951}, {"start": 1755766359354, "end": 1755766359521, "duration": 167}, {"start": 1755766374720, "end": 1755766375046, "duration": 326}, {"start": 1755766375692, "end": 1755766375884, "duration": 192}, {"start": 1755766382058, "end": 1755766382323, "duration": 265}, {"start": 1755766383010, "end": 1755766383329, "duration": 319}]}, "usageData": {"totalVersions": 19, "versionConversations": {"3-1": [{"operationName": "modify", "userPrompt": "Applied style: 3D光影立方", "aiResponse": {"code": "let particles = [];\nlet hue = 0;\n\nfunction setup() {\n  createCanvas(635, 720, WEBGL);\n  colorMode(HSB, 360, 100, 100, 100);\n  noStroke();\n}\n\nfunction draw() {\n  background(10, 10, 20);\n  ambientLight(60, 60, 60);\n  let dirX = (mouseX / width - 0.5) * 2;\n  let dirY = (mouseY / height - 0.5) * 2;\n  directionalLight(250, 250, 250, -dirX, -dirY, -1);\n  \n  hue += 0.5;\n  if (hue > 360) hue = 0;\n\n  if (mouseIsPressed || touches.length > 0) {\n    for (let i = 0; i < 2; i++) {\n      particles.push(new Particle(mouseX - width / 2, mouseY - height / 2, hue));\n    }\n  }\n\n  for (let i = particles.length - 1; i >= 0; i--) {\n    particles[i].update();\n    particles[i].show();\n    if (particles[i].isFinished()) {\n      particles.splice(i, 1);\n    }\n  }\n}\n\nclass Particle {\n  constructor(x, y, h) {\n    this.pos = createVector(x, y, 0);\n    this.vel = p5.Vector.random3D().mult(random(1, 4));\n    this.acc = createVector(0, 0.05, 0);\n    this.lifespan = 100;\n    this.baseHue = h;\n  }\n\n  isFinished() {\n    return this.lifespan < 0;\n  }\n\n  update() {\n    this.vel.add(this.acc);\n    this.pos.add(this.vel);\n    this.lifespan -= 2;\n  }\n\n  show() {\n    let currentHue = (this.baseHue + (100 - this.lifespan) * 0.5) % 360;\n    let saturation = this.lifespan;\n    let brightness = 100;\n    push();\n    translate(this.pos.x, this.pos.y, this.pos.z);\n    ambientMaterial(currentHue, saturation, brightness, this.lifespan);\n    let d = map(this.lifespan, 0, 100, 0, 20);\n    sphere(d);\n    pop();\n  }\n}\n", "rationale": "✨ 我将3D光影立方的立体感注入了您流动的粒子系统。粒子现在在空间中以球体形式闪烁，受光影影响，仿佛漂浮在梦幻的宇宙中。"}, "timestamp": "2025-08-21T08:50:37.551Z", "mode": "general"}, {"operationName": "chat", "mode": "explorative", "userPrompt": "加一点在里面游弋的鱼", "aiResponse": {"code": "let particles = [];\nlet hue = 0;\nlet fish = [];\n\nfunction setup() {\n  createCanvas(635, 720, WEBGL);\n  colorMode(HSB, 360, 100, 100, 100);\n  noStroke();\n  for (let i = 0; i < 5; i++) {\n    fish.push(new Fish(random(-width / 2, width / 2), random(-height / 2, height / 2)));\n  }\n}\n\nfunction draw() {\n  background(10, 10, 20);\n  ambientLight(60, 60, 60);\n  let dirX = (mouseX / width - 0.5) * 2;\n  let dirY = (mouseY / height - 0.5) * 2;\n  directionalLight(250, 250, 250, -dirX, -dirY, -1);\n  \n  hue += 0.5;\n  if (hue > 360) hue = 0;\n\n  if (mouseIsPressed || touches.length > 0) {\n    for (let i = 0; i < 2; i++) {\n      particles.push(new Particle(mouseX - width / 2, mouseY - height / 2, hue));\n    }\n  }\n\n  for (let i = particles.length - 1; i >= 0; i--) {\n    particles[i].update();\n    particles[i].show();\n    if (particles[i].isFinished()) {\n      particles.splice(i, 1);\n    }\n  }\n\n  for (let f of fish) {\n    f.update();\n    f.show();\n  }\n}\n\nclass Particle {\n  constructor(x, y, h) {\n    this.pos = createVector(x, y, 0);\n    this.vel = p5.Vector.random3D().mult(random(1, 4));\n    this.acc = createVector(0, 0.05, 0);\n    this.lifespan = 100;\n    this.baseHue = h;\n  }\n\n  isFinished() {\n    return this.lifespan < 0;\n  }\n\n  update() {\n    this.vel.add(this.acc);\n    this.pos.add(this.vel);\n    this.lifespan -= 2;\n  }\n\n  show() {\n    let currentHue = (this.baseHue + (100 - this.lifespan) * 0.5) % 360;\n    let saturation = this.lifespan;\n    let brightness = 100;\n    push();\n    translate(this.pos.x, this.pos.y, this.pos.z);\n    ambientMaterial(currentHue, saturation, brightness, this.lifespan);\n    let d = map(this.lifespan, 0, 100, 0, 20);\n    sphere(d);\n    pop();\n  }\n}\n\nclass Fish {\n  constructor(x, y) {\n    this.pos = createVector(x, y, random(-100, 100));\n    this.vel = p5.Vector.random3D().mult(0.5);\n  }\n\n  update() {\n    this.pos.add(this.vel);\n    if (this.pos.x > width / 2 || this.pos.x < -width / 2) this.vel.x *= -1;\n    if (this.pos.y > height / 2 || this.pos.y < -height / 2) this.vel.y *= -1;\n    if (this.pos.z > 100 || this.pos.z < -100) this.vel.z *= -1;\n  }\n\n  show() {\n    push();\n    translate(this.pos.x, this.pos.y, this.pos.z);\n    fill(200, 100, 100);\n    box(15, 5, 5);\n    pop();\n  }\n}", "exploration": "- **生物动态**：鱼的运动方式与粒子形成对比，让画面更有生命力；是否考虑鱼的路径更加流畅或带有方向感，例如模拟鱼群行为？\n- **色彩层次**：鱼的颜色可以通过与粒子的色调对比增强视觉冲击力；是否可以考虑让鱼的颜色与背景或粒子颜色产生节奏性的变化？\n- **空间互动**：鱼在三维空间的游动路径是否可以影响粒子的生成或消失，形成一种动态的视觉互动？", "reflection": "- 你希望加入的鱼在整体体验中传达什么样的核心体验？是自然的宁静，还是动态的活力？\n- 在这个版本中，鱼的存在是否有效地丰富了原有粒子系统的视觉体验？如果是，哪些元素最显著地增强了这一体验？如果不是，问题出在哪里？\n- 如果想让鱼的动态更贴合你的创作意图，你认为调整它们的运动算法，还是对它们的视觉表现（如形状、颜色）进行优化更为重要？"}, "timestamp": "2025-08-21T08:51:58.674Z"}], "4-1": [{"operationName": "duplicate", "userPrompt": "Auto-duplicate from version 2.1 (ID: 3-1) on save", "mode": "none", "aiResponse": "none", "timestamp": "2025-08-21T08:52:06.304Z"}], "3-undefined": [{"operationName": "duplicate", "userPrompt": "Duplicate from version 2.0 (ID: 2-1)", "mode": "none", "aiResponse": "none", "timestamp": "2025-08-21T08:52:11.262Z"}, {"operationName": "duplicate", "userPrompt": "Duplicate from version 2.0 (ID: 2-1)", "mode": "none", "aiResponse": "none", "timestamp": "2025-08-21T08:52:13.820Z"}, {"operationName": "modify", "userPrompt": "Applied style: 飘落的雪花", "aiResponse": {"code": "let particles = [];\nlet hue = 0;\n\nfunction setup() {\n  createCanvas(635, 720);\n  colorMode(HSB, 360, 100, 100, 100);\n  noStroke();\n}\n\nfunction draw() {\n  background(0, 0, 10, 25);\n  hue += 0.5;\n  if (hue > 360) hue = 0;\n\n  if (mouseIsPressed || touches.length > 0) {\n    for (let i = 0; i < 2; i++) {\n      particles.push(new Particle(mouseX, mouseY, hue));\n    }\n  }\n\n  for (let i = particles.length - 1; i >= 0; i--) {\n    particles[i].update();\n    particles[i].show();\n    if (particles[i].isFinished()) {\n      particles.splice(i, 1);\n    }\n  }\n}\n\nclass Particle {\n  constructor(x, y, h) {\n    this.pos = createVector(x, y);\n    this.vel = p5.Vector.random2D().mult(random(0.5, 1.5));\n    this.acc = createVector(0, random(0.01, 0.03));\n    this.lifespan = 150;\n    this.baseHue = h;\n    this.angle = random(0, TWO_PI);\n    this.radius = random(10, 20);\n  }\n\n  isFinished() {\n    return this.lifespan < 0;\n  }\n\n  update() {\n    this.angle += 0.02;\n    let wind = map(sin(this.angle), -1, 1, -0.05, 0.05);\n    this.vel.add(this.acc);\n    this.vel.x += wind;\n    this.pos.add(this.vel);\n    this.lifespan -= 1;\n  }\n\n  show() {\n    let currentHue = (this.baseHue + (150 - this.lifespan) * 0.5) % 360;\n    let saturation = map(this.lifespan, 0, 150, 50, 100);\n    let brightness = 100;\n    fill(currentHue, saturation, brightness, this.lifespan);\n    let d = map(this.lifespan, 0, 150, 2, 10);\n    ellipse(this.pos.x, this.pos.y, d, d);\n  }\n}", "rationale": "✨ 我将飘落雪花的轻盈融入了您动态的粒子场景。通过引入微风和更柔和的速度，粒子现在像雪花般在画布中悠然飘落，带来一种宁静的动感。", "reflection": "- 你希望观众在这个作品中感受到的情绪是如何变化的？\n- 这些轻盈的粒子运动是否传达了你对“飘落”的设想，或者有更具象的元素可以进一步加强这种感觉？\n- 在保持轻盈感的同时，你有兴趣为这些粒子引入更多的互动，比如通过声音或其他传感器输入来改变它们的运动轨迹吗？"}, "timestamp": "2025-08-21T08:52:31.250Z", "mode": "explorative"}]}, "previewClicks": 18, "actionCounts": {"delete": 1, "modify": 2, "merge": 0, "duplicate": 2}, "versionCodes": {"1-0": "function setup() {\n  createCanvas(635, 720);\n}\n\nfunction draw() {\n  background(220);\n}", "2-0": "let angle = 0;\nlet len = 120;\n\nfunction setup() {\n  createCanvas(635, 720);\n}\n\nfunction draw() {\n  background(220);\n  angle = map(mouseX, 0, width, 0, PI / 2);\n  len = map(mouseY, 0, height, 50, 150);\n  \n  translate(width / 2, height);\n  stroke(50);\n  branch(len);\n}\n\nfunction branch(len) {\n  strokeWeight(max(1, len / 10));\n  line(0, 0, 0, -len);\n  translate(0, -len);\n\n  if (len > 4) {\n    push();\n    rotate(angle);\n    branch(len * 0.67);\n    pop();\n\n    push();\n    rotate(-angle);\n    branch(len * 0.67);\n    pop();\n  }\n}\n", "3-0": "let angle = 0;\nlet len = 120;\n\nfunction setup() {\n  createCanvas(635, 720);\n}\n\nfunction draw() {\n  background(220);\n  angle = map(mouseX, 0, width, 0, PI / 2);\n  len = map(mouseY, 0, height, 50, 150);\n  \n  translate(width / 2, height);\n  stroke(50);\n  branch(len);\n}\n\nfunction branch(len) {\n  strokeWeight(max(1, len / 10));\n  line(0, 0, 0, -len);\n  translate(0, -len);\n\n  if (len > 4) {\n    push();\n    rotate(angle);\n    branch(len * 0.67);\n    pop();\n\n    push();\n    rotate(-angle);\n    branch(len * 0.67);\n    pop();\n  }\n}\n", "2-1": "let particles = [];\nlet hue = 0;\n\nfunction setup() {\n  createCanvas(635, 720);\n  colorMode(HSB, 360, 100, 100, 100);\n  noStroke();\n}\n\nfunction draw() {\n  background(0, 0, 10, 25);\n  hue += 0.5;\n  if (hue > 360) hue = 0;\n\n  if (mouseIsPressed || touches.length > 0) {\n    for (let i = 0; i < 2; i++) {\n      particles.push(new Particle(mouseX, mouseY, hue));\n    }\n  }\n\n  for (let i = particles.length - 1; i >= 0; i--) {\n    particles[i].update();\n    particles[i].show();\n    if (particles[i].isFinished()) {\n      particles.splice(i, 1);\n    }\n  }\n}\n\nclass Particle {\n  constructor(x, y, h) {\n    this.pos = createVector(x, y);\n    this.vel = p5.Vector.random2D().mult(random(1, 4));\n    this.acc = createVector(0, 0.05);\n    this.lifespan = 100;\n    this.baseHue = h;\n  }\n\n  isFinished() {\n    return this.lifespan < 0;\n  }\n\n  update() {\n    this.vel.add(this.acc);\n    this.pos.add(this.vel);\n    this.lifespan -= 2;\n  }\n\n  show() {\n    let currentHue = (this.baseHue + (100 - this.lifespan) * 0.5) % 360;\n    let saturation = this.lifespan;\n    let brightness = 100;\n    fill(currentHue, saturation, brightness, this.lifespan);\n    let d = map(this.lifespan, 0, 100, 0, 20);\n    ellipse(this.pos.x, this.pos.y, d, d);\n  }\n}\n", "merge-3-1.00": "let angle = 0;\nlet len = 120;\nlet particles = [];\nlet hue = 0;\n\nfunction setup() {\n  createCanvas(635, 720);\n  colorMode(HSB, 360, 100, 100, 100);\n  noStroke();\n}\n\nfunction draw() {\n  background(0, 0, 10, 25);\n  hue += 0.5;\n  if (hue > 360) hue = 0;\n\n  angle = map(mouseX, 0, width, 0, PI / 2);\n  len = map(mouseY, 0, height, 50, 150);\n  \n  translate(width / 2, height);\n  stroke(50);\n  branch(len);\n\n  if (mouseIsPressed || touches.length > 0) {\n    for (let i = 0; i < 2; i++) {\n      particles.push(new Particle(mouseX, mouseY, hue));\n    }\n  }\n\n  for (let i = particles.length - 1; i >= 0; i--) {\n    particles[i].update();\n    particles[i].show();\n    if (particles[i].isFinished()) {\n      particles.splice(i, 1);\n    }\n  }\n}\n\nfunction branch(len) {\n  strokeWeight(max(1, len / 10));\n  line(0, 0, 0, -len);\n  translate(0, -len);\n\n  if (len > 4) {\n    push();\n    rotate(angle);\n    branch(len * 0.67);\n    pop();\n\n    push();\n    rotate(-angle);\n    branch(len * 0.67);\n    pop();\n  }\n}\n\nclass Particle {\n  constructor(x, y, h) {\n    this.pos = createVector(x, y);\n    this.vel = p5.Vector.random2D().mult(random(1, 4));\n    this.acc = createVector(0, 0.05);\n    this.lifespan = 100;\n    this.baseHue = h;\n  }\n\n  isFinished() {\n    return this.lifespan < 0;\n  }\n\n  update() {\n    this.vel.add(this.acc);\n    this.pos.add(this.vel);\n    this.lifespan -= 2;\n  }\n\n  show() {\n    let currentHue = (this.baseHue + (100 - this.lifespan) * 0.5) % 360;\n    let saturation = this.lifespan;\n    let brightness = 100;\n    fill(currentHue, saturation, brightness, this.lifespan);\n    let d = map(this.lifespan, 0, 100, 0, 20);\n    ellipse(this.pos.x, this.pos.y, d, d);\n  }\n}\n", "merge-4-0.50": "let angle = 0;\nlet len = 120;\nlet particles = [];\nlet hue = 0;\n\nfunction setup() {\n  createCanvas(635, 720);\n  colorMode(HSB, 360, 100, 100, 100);\n  noStroke();\n}\n\nfunction draw() {\n  background(0, 0, 10, 25);\n  hue += 0.5;\n  if (hue > 360) hue = 0;\n\n  angle = map(mouseX, 0, width, 0, PI / 2);\n  len = map(mouseY, 0, height, 50, 150);\n  \n  translate(width / 2, height);\n  stroke(50);\n  branch(len);\n\n  if (mouseIsPressed || touches.length > 0) {\n    for (let i = 0; i < 2; i++) {\n      particles.push(new Particle(mouseX, mouseY, hue));\n    }\n  }\n\n  for (let i = particles.length - 1; i >= 0; i--) {\n    particles[i].update();\n    particles[i].show();\n    if (particles[i].isFinished()) {\n      particles.splice(i, 1);\n    }\n  }\n}\n\nfunction branch(len) {\n  strokeWeight(max(1, len / 10));\n  line(0, 0, 0, -len);\n  translate(0, -len);\n\n  if (len > 4) {\n    push();\n    rotate(angle);\n    branch(len * 0.67);\n    pop();\n\n    push();\n    rotate(-angle);\n    branch(len * 0.67);\n    pop();\n  }\n}\n\nclass Particle {\n  constructor(x, y, h) {\n    this.pos = createVector(x, y);\n    this.vel = p5.Vector.random2D().mult(random(1, 4));\n    this.acc = createVector(0, 0.05);\n    this.lifespan = 100;\n    this.baseHue = h;\n  }\n\n  isFinished() {\n    return this.lifespan < 0;\n  }\n\n  update() {\n    this.vel.add(this.acc);\n    this.pos.add(this.vel);\n    this.lifespan -= 2;\n  }\n\n  show() {\n    let currentHue = (this.baseHue + (100 - this.lifespan) * 0.5) % 360;\n    let saturation = this.lifespan;\n    let brightness = 100;\n    fill(currentHue, saturation, brightness, this.lifespan);\n    let d = map(this.lifespan, 0, 100, 0, 20);\n    ellipse(this.pos.x, this.pos.y, d, d);\n  }\n}\n", "4-0": "let angle = 0;\nlet len = 120;\n\nfunction setup() {\n  createCanvas(635, 720);\n}\n\nfunction draw() {\n  // 绘制五彩斑斓的背景\n  for (let i = 0; i < height; i += 10) {\n    let colorValue = map(i, 0, height, 0, 255);\n    stroke(255 - colorValue, colorValue, 150);\n    line(0, i, width, i);\n  }\n\n  angle = map(mouseX, 0, width, 0, PI / 2);\n  len = map(mouseY, 0, height, 50, 150);\n  \n  translate(width / 2, height);\n  stroke(50);\n  branch(len);\n}\n\nfunction branch(len) {\n  strokeWeight(max(1, len / 10));\n  line(0, 0, 0, -len);\n  translate(0, -len);\n\n  if (len > 4) {\n    push();\n    rotate(angle);\n    branch(len * 0.67);\n    pop();\n\n    push();\n    rotate(-angle);\n    branch(len * 0.67);\n    pop();\n  }\n}", "5-0": "let angle = 0;\nlet len = 120;\n\nfunction setup() {\n  createCanvas(635, 720);\n}\n\nfunction draw() {\n  // 绘制五彩斑斓的背景\n  for (let i = 0; i < height; i += 10) {\n    let colorValue = map(i, 0, height, 0, 255);\n    stroke(255 - colorValue, colorValue, 150);\n    line(0, i, width, i);\n  }\n\n  angle = map(mouseX, 0, width, 0, PI / 2);\n  len = map(mouseY, 0, height, 50, 150);\n  \n  translate(width / 2, height);\n  stroke(50);\n  branch(len);\n}\n\nfunction branch(len) {\n  strokeWeight(max(1, len / 10));\n  line(0, 0, 0, -len);\n  translate(0, -len);\n\n  if (len > 4) {\n    push();\n    rotate(angle);\n    branch(len * 0.67);\n    pop();\n\n    push();\n    rotate(-angle);\n    branch(len * 0.67);\n    pop();\n  }\n}", "merge-6-0.25": "let angle = 0;\nlet len = 120;\nlet particles = [];\nlet hue = 0;\n\nfunction setup() {\n  createCanvas(635, 720);\n  colorMode(HSB, 360, 100, 100, 100);\n  noStroke();\n}\n\nfunction draw() {\n  // 绘制五彩斑斓的背景\n  for (let i = 0; i < height; i += 10) {\n    let colorValue = map(i, 0, height, 0, 255);\n    stroke(255 - colorValue, colorValue, 150);\n    line(0, i, width, i);\n  }\n\n  hue += 0.5;\n  if (hue > 360) hue = 0;\n\n  angle = map(mouseX, 0, width, 0, PI / 2);\n  len = map(mouseY, 0, height, 50, 150);\n  \n  translate(width / 2, height);\n  stroke(50);\n  branch(len);\n\n  if (mouseIsPressed || touches.length > 0) {\n    for (let i = 0; i < 2; i++) {\n      particles.push(new Particle(mouseX, mouseY, hue));\n    }\n  }\n\n  for (let i = particles.length - 1; i >= 0; i--) {\n    particles[i].update();\n    particles[i].show();\n    if (particles[i].isFinished()) {\n      particles.splice(i, 1);\n    }\n  }\n}\n\nfunction branch(len) {\n  strokeWeight(max(1, len / 10));\n  line(0, 0, 0, -len);\n  translate(0, -len);\n\n  if (len > 4) {\n    push();\n    rotate(angle);\n    branch(len * 0.67);\n    pop();\n\n    push();\n    rotate(-angle);\n    branch(len * 0.67);\n    pop();\n  }\n}\n\nclass Particle {\n  constructor(x, y, h) {\n    this.pos = createVector(x, y);\n    this.vel = p5.Vector.random2D().mult(random(1, 4));\n    this.acc = createVector(0, 0.05);\n    this.lifespan = 100;\n    this.baseHue = h;\n  }\n\n  isFinished() {\n    return this.lifespan < 0;\n  }\n\n  update() {\n    this.vel.add(this.acc);\n    this.pos.add(this.vel);\n    this.lifespan -= 2;\n  }\n\n  show() {\n    let currentHue = (this.baseHue + (100 - this.lifespan) * 0.5) % 360;\n    let saturation = this.lifespan;\n    let brightness = 100;\n    fill(currentHue, saturation, brightness, this.lifespan);\n    let d = map(this.lifespan, 0, 100, 0, 20);\n    ellipse(this.pos.x, this.pos.y, d, d);\n  }\n}\n", "6-0": "let angle = 0;\nlet len = 120;\n\nfunction setup() {\n  createCanvas(635, 720);\n}\n\nfunction draw() {\n  // 绘制五彩斑斓的背景\n  for (let i = 0; i < height; i += 10) {\n    let colorValue = map(i, 0, height, 0, 255);\n    stroke(255 - colorValue, colorValue, 150);\n    line(0, i, width, i);\n  }\n\n  angle = map(mouseX, 0, width, 0, PI / 2);\n  len = map(mouseY, 0, height, 50, 150);\n  \n  translate(width / 2, height);\n  stroke(50);\n  branch(len);\n}\n\nfunction branch(len) {\n  strokeWeight(max(1, len / 10));\n  line(0, 0, 0, -len);\n  translate(0, -len);\n\n  if (len > 4) {\n    push();\n    rotate(angle);\n    branch(len * 0.67);\n    pop();\n\n    push();\n    rotate(-angle);\n    branch(len * 0.67);\n    pop();\n  }\n}", "7-0": "let angle = 0;\nlet len = 120;\n\nfunction setup() {\n  createCanvas(635, 720);\n}\n\nfunction draw() {\n  // 绘制五彩斑斓的背景\n  for (let i = 0; i < height; i += 10) {\n    let colorValue = map(i, 0, height, 0, 255);\n    stroke(255 - colorValue, colorValue, 150);\n    line(0, i, width, i);\n  }\n\n  angle = map(mouseX, 0, width, 0, PI / 2);\n  len = map(mouseY, 0, height, 50, 150);\n  \n  translate(width / 2, height);\n  stroke(50);\n  branch(len);\n}\n\nfunction branch(len) {\n  strokeWeight(max(1, len / 10));\n  line(0, 0, 0, -len);\n  translate(0, -len);\n\n  if (len > 4) {\n    push();\n    rotate(angle);\n    branch(len * 0.67);\n    pop();\n\n    push();\n    rotate(-angle);\n    branch(len * 0.67);\n    pop();\n  }\n}", "8-0": "let angle = 0;\nlet len = 120;\nlet balls = [];\n\nfunction setup() {\n  createCanvas(635, 720);\n}\n\nfunction draw() {\n  // 绘制五彩斑斓的背景\n  for (let i = 0; i < height; i += 10) {\n    let colorValue = map(i, 0, height, 0, 255);\n    stroke(255 - colorValue, colorValue, 150);\n    line(0, i, width, i);\n  }\n\n  angle = map(mouseX, 0, width, 0, PI / 2);\n  len = map(mouseY, 0, height, 50, 150);\n  \n  translate(width / 2, height);\n  stroke(50);\n  branch(len);\n\n  // 添加小球\n  noStroke();\n  fill(255, 150);\n  for (let i = 0; i < balls.length; i++) {\n    ellipse(balls[i].x, balls[i].y, 10, 10);\n    balls[i].y += balls[i].speed;\n    if (balls[i].y > height) {\n      balls[i].y = 0;\n    }\n  }\n}\n\nfunction branch(len) {\n  strokeWeight(max(1, len / 10));\n  line(0, 0, 0, -len);\n  translate(0, -len);\n\n  if (len > 4) {\n    push();\n    rotate(angle);\n    branch(len * 0.67);\n    pop();\n\n    push();\n    rotate(-angle);\n    branch(len * 0.67);\n    pop();\n  }\n}\n\nfunction mousePressed() {\n  balls.push({x: random(width), y: 0, speed: random(1, 3)});\n}", "7-0.25": "let angle = 0;\nlet len = 120;\nlet particles = [];\nlet hue = 0;\n\nfunction setup() {\n  createCanvas(635, 720);\n  colorMode(HSB, 360, 100, 100, 100);\n  noStroke();\n}\n\nfunction draw() {\n  // 绘制五彩斑斓的背景\n  for (let i = 0; i < height; i += 10) {\n    let colorValue = map(i, 0, height, 0, 255);\n    stroke(255 - colorValue, colorValue, 150);\n    line(0, i, width, i);\n  }\n\n  hue += 0.5;\n  if (hue > 360) hue = 0;\n\n  angle = map(mouseX, 0, width, 0, PI / 2);\n  len = map(mouseY, 0, height, 50, 150);\n  \n  translate(width / 2, height);\n  stroke(50);\n  branch(len);\n\n  if (mouseIsPressed || touches.length > 0) {\n    for (let i = 0; i < 2; i++) {\n      particles.push(new Particle(mouseX, mouseY, hue));\n    }\n  }\n\n  for (let i = particles.length - 1; i >= 0; i--) {\n    particles[i].update();\n    particles[i].show();\n    if (particles[i].isFinished()) {\n      particles.splice(i, 1);\n    }\n  }\n}\n\nfunction branch(len) {\n  strokeWeight(max(1, len / 10));\n  line(0, 0, 0, -len);\n  translate(0, -len);\n\n  if (len > 4) {\n    push();\n    rotate(angle);\n    branch(len * 0.67);\n    pop();\n\n    push();\n    rotate(-angle);\n    branch(len * 0.67);\n    pop();\n  }\n}\n\nclass Particle {\n  constructor(x, y, h) {\n    this.pos = createVector(x, y);\n    this.vel = p5.Vector.random2D().mult(random(1, 4));\n    this.acc = createVector(0, 0.05);\n    this.lifespan = 100;\n    this.baseHue = h;\n  }\n\n  isFinished() {\n    return this.lifespan < 0;\n  }\n\n  update() {\n    this.vel.add(this.acc);\n    this.pos.add(this.vel);\n    this.lifespan -= 2;\n  }\n\n  show() {\n    let currentHue = (this.baseHue + (100 - this.lifespan) * 0.5) % 360;\n    let saturation = this.lifespan;\n    let brightness = 100;\n    fill(currentHue, saturation, brightness, this.lifespan);\n    let d = map(this.lifespan, 0, 100, 0, 20);\n    ellipse(this.pos.x, this.pos.y, d, d);\n  }\n}\n", "9-0": "let angle = 0;\nlet len = 120;\nlet balls = [];\n\nfunction setup() {\n  createCanvas(635, 720);\n}\n\nfunction draw() {\n  // 绘制五彩斑斓的背景\n  for (let i = 0; i < height; i += 10) {\n    let colorValue = map(i, 0, height, 0, 255);\n    stroke(255 - colorValue, colorValue, 150);\n    line(0, i, width, i);\n  }\n\n  angle = map(mouseX, 0, width, 0, PI / 2);\n  len = map(mouseY, 0, height, 50, 150);\n  \n  translate(width / 2, height);\n  stroke(50);\n  branch(len);\n\n  // 添加小球\n  noStroke();\n  fill(255, 150);\n  for (let i = 0; i < balls.length; i++) {\n    ellipse(balls[i].x, balls[i].y, 10, 10);\n    balls[i].y += balls[i].speed;\n    if (balls[i].y > height) {\n      balls[i].y = 0;\n    }\n  }\n}\n\nfunction branch(len) {\n  strokeWeight(max(1, len / 10));\n  line(0, 0, 0, -len);\n  translate(0, -len);\n\n  if (len > 4) {\n    push();\n    rotate(angle);\n    branch(len * 0.67);\n    pop();\n\n    push();\n    rotate(-angle);\n    branch(len * 0.67);\n    pop();\n  }\n}\n\nfunction mousePressed() {\n  balls.push({x: random(width), y: 0, speed: random(1, 3)});\n}", "3-1": "let particles = [];\nlet hue = 0;\n\nfunction setup() {\n  createCanvas(635, 720, WEBGL);\n  colorMode(HSB, 360, 100, 100, 100);\n  noStroke();\n}\n\nfunction draw() {\n  background(10, 10, 20);\n  ambientLight(60, 60, 60);\n  let dirX = (mouseX / width - 0.5) * 2;\n  let dirY = (mouseY / height - 0.5) * 2;\n  directionalLight(250, 250, 250, -dirX, -dirY, -1);\n  \n  hue += 0.5;\n  if (hue > 360) hue = 0;\n\n  if (mouseIsPressed || touches.length > 0) {\n    for (let i = 0; i < 2; i++) {\n      particles.push(new Particle(mouseX - width / 2, mouseY - height / 2, hue));\n    }\n  }\n\n  for (let i = particles.length - 1; i >= 0; i--) {\n    particles[i].update();\n    particles[i].show();\n    if (particles[i].isFinished()) {\n      particles.splice(i, 1);\n    }\n  }\n}\n\nclass Particle {\n  constructor(x, y, h) {\n    this.pos = createVector(x, y, 0);\n    this.vel = p5.Vector.random3D().mult(random(1, 4));\n    this.acc = createVector(0, 0.05, 0);\n    this.lifespan = 100;\n    this.baseHue = h;\n  }\n\n  isFinished() {\n    return this.lifespan < 0;\n  }\n\n  update() {\n    this.vel.add(this.acc);\n    this.pos.add(this.vel);\n    this.lifespan -= 2;\n  }\n\n  show() {\n    let currentHue = (this.baseHue + (100 - this.lifespan) * 0.5) % 360;\n    let saturation = this.lifespan;\n    let brightness = 100;\n    push();\n    translate(this.pos.x, this.pos.y, this.pos.z);\n    ambientMaterial(currentHue, saturation, brightness, this.lifespan);\n    let d = map(this.lifespan, 0, 100, 0, 20);\n    sphere(d);\n    pop();\n  }\n}\n", "4-1": "let particles = [];\nlet hue = 0;\nlet fish = [];\n\nfunction setup() {\n  createCanvas(635, 720, WEBGL);\n  colorMode(HSB, 360, 100, 100, 100);\n  noStroke();\n  for (let i = 0; i < 5; i++) {\n    fish.push(new Fish(random(-width / 2, width / 2), random(-height / 2, height / 2)));\n  }\n}\n\nfunction draw() {\n  background(10, 10, 20);\n  ambientLight(60, 60, 60);\n  let dirX = (mouseX / width - 0.5) * 2;\n  let dirY = (mouseY / height - 0.5) * 2;\n  directionalLight(250, 250, 250, -dirX, -dirY, -1);\n  \n  hue += 0.5;\n  if (hue > 360) hue = 0;\n\n  if (mouseIsPressed || touches.length > 0) {\n    for (let i = 0; i < 2; i++) {\n      particles.push(new Particle(mouseX - width / 2, mouseY - height / 2, hue));\n    }\n  }\n\n  for (let i = particles.length - 1; i >= 0; i--) {\n    particles[i].update();\n    particles[i].show();\n    if (particles[i].isFinished()) {\n      particles.splice(i, 1);\n    }\n  }\n\n  for (let f of fish) {\n    f.update();\n    f.show();\n  }\n}\n\nclass Particle {\n  constructor(x, y, h) {\n    this.pos = createVector(x, y, 0);\n    this.vel = p5.Vector.random3D().mult(random(1, 4));\n    this.acc = createVector(0, 0.05, 0);\n    this.lifespan = 100;\n    this.baseHue = h;\n  }\n\n  isFinished() {\n    return this.lifespan < 0;\n  }\n\n  update() {\n    this.vel.add(this.acc);\n    this.pos.add(this.vel);\n    this.lifespan -= 2;\n  }\n\n  show() {\n    let currentHue = (this.baseHue + (100 - this.lifespan) * 0.5) % 360;\n    let saturation = this.lifespan;\n    let brightness = 100;\n    push();\n    translate(this.pos.x, this.pos.y, this.pos.z);\n    ambientMaterial(currentHue, saturation, brightness, this.lifespan);\n    let d = map(this.lifespan, 0, 100, 0, 20);\n    sphere(d);\n    pop();\n  }\n}\n\nclass Fish {\n  constructor(x, y) {\n    this.pos = createVector(x, y, random(-100, 100));\n    this.vel = p5.Vector.random3D().mult(0.5);\n  }\n\n  update() {\n    this.pos.add(this.vel);\n    if (this.pos.x > width / 2 || this.pos.x < -width / 2) this.vel.x *= -1;\n    if (this.pos.y > height / 2 || this.pos.y < -height / 2) this.vel.y *= -1;\n    if (this.pos.z > 100 || this.pos.z < -100) this.vel.z *= -1;\n  }\n\n  show() {\n    push();\n    translate(this.pos.x, this.pos.y, this.pos.z);\n    fill(200, 100, 100);\n    box(15, 5, 5);\n    pop();\n  }\n}", "3-undefined": "let particles = [];\nlet hue = 0;\n\nfunction setup() {\n  createCanvas(635, 720);\n  colorMode(HSB, 360, 100, 100, 100);\n  noStroke();\n}\n\nfunction draw() {\n  background(0, 0, 10, 25);\n  hue += 0.5;\n  if (hue > 360) hue = 0;\n\n  if (mouseIsPressed || touches.length > 0) {\n    for (let i = 0; i < 2; i++) {\n      particles.push(new Particle(mouseX, mouseY, hue));\n    }\n  }\n\n  for (let i = particles.length - 1; i >= 0; i--) {\n    particles[i].update();\n    particles[i].show();\n    if (particles[i].isFinished()) {\n      particles.splice(i, 1);\n    }\n  }\n}\n\nclass Particle {\n  constructor(x, y, h) {\n    this.pos = createVector(x, y);\n    this.vel = p5.Vector.random2D().mult(random(0.5, 1.5));\n    this.acc = createVector(0, random(0.01, 0.03));\n    this.lifespan = 150;\n    this.baseHue = h;\n    this.angle = random(0, TWO_PI);\n    this.radius = random(10, 20);\n  }\n\n  isFinished() {\n    return this.lifespan < 0;\n  }\n\n  update() {\n    this.angle += 0.02;\n    let wind = map(sin(this.angle), -1, 1, -0.05, 0.05);\n    this.vel.add(this.acc);\n    this.vel.x += wind;\n    this.pos.add(this.vel);\n    this.lifespan -= 1;\n  }\n\n  show() {\n    let currentHue = (this.baseHue + (150 - this.lifespan) * 0.5) % 360;\n    let saturation = map(this.lifespan, 0, 150, 50, 100);\n    let brightness = 100;\n    fill(currentHue, saturation, brightness, this.lifespan);\n    let d = map(this.lifespan, 0, 150, 2, 10);\n    ellipse(this.pos.x, this.pos.y, d, d);\n  }\n}"}}}
