[
  {
    "id": "p5_adv_001",
    "tag": "炫彩彗星拖尾",
    "image": "/image/1.png",
    "code": "let particles = [];\nlet hue = 0;\n\nfunction setup() {\n  createCanvas(800, 1200);\n  colorMode(HSB, 360, 100, 100, 100);\n  noStroke();\n}\n\nfunction draw() {\n  background(0, 0, 10, 25);\n  hue += 0.5;\n  if (hue > 360) hue = 0;\n\n  if (mouseIsPressed || touches.length > 0) {\n    for (let i = 0; i < 2; i++) {\n      particles.push(new Particle(mouseX, mouseY, hue));\n    }\n  }\n\n  for (let i = particles.length - 1; i >= 0; i--) {\n    particles[i].update();\n    particles[i].show();\n    if (particles[i].isFinished()) {\n      particles.splice(i, 1);\n    }\n  }\n}\n\nclass Particle {\n  constructor(x, y, h) {\n    this.pos = createVector(x, y);\n    this.vel = p5.Vector.random2D().mult(random(1, 4));\n    this.acc = createVector(0, 0.05);\n    this.lifespan = 100;\n    this.baseHue = h;\n  }\n\n  isFinished() {\n    return this.lifespan < 0;\n  }\n\n  update() {\n    this.vel.add(this.acc);\n    this.pos.add(this.vel);\n    this.lifespan -= 2;\n  }\n\n  show() {\n    let currentHue = (this.baseHue + (100 - this.lifespan) * 0.5) % 360;\n    let saturation = this.lifespan;\n    let brightness = 100;\n    fill(currentHue, saturation, brightness, this.lifespan);\n    let d = map(this.lifespan, 0, 100, 0, 20);\n    ellipse(this.pos.x, this.pos.y, d, d);\n  }\n}"
  },
  {
    "id": "p5_adv_002",
    "tag": "有机水母群",
    "image": "/image/2.png",
    "code": "let jellies = [];\n\nfunction setup() {\n  createCanvas(800, 1200);\n  for (let i = 0; i < 10; i++) {\n    jellies.push(new Jelly(random(width), random(height)));\n  }\n}\n\nfunction draw() {\n  background(0, 25, 50);\n  for (let jelly of jellies) {\n    jelly.update();\n    jelly.display();\n  }\n}\n\nfunction mousePressed() {\n  jellies.push(new Jelly(mouseX, mouseY));\n}\n\nclass Jelly {\n  constructor(x, y) {\n    this.pos = createVector(x, y);\n    this.vel = createVector(0, -1);\n    this.noiseOffsetX = random(1000);\n    this.bodySize = random(20, 50);\n    this.hue = random(180, 240);\n    this.tentacles = [];\n    for (let i = 0; i < 8; i++) {\n      this.tentacles.push(new Tentacle(this.pos, this.bodySize));\n    }\n  }\n\n  update() {\n    let dirX = map(noise(this.noiseOffsetX), 0, 1, -0.5, 0.5);\n    this.vel.x = dirX;\n    this.pos.add(this.vel);\n    this.noiseOffsetX += 0.01;\n\n    if (this.pos.y < -this.bodySize) this.pos.y = height + this.bodySize;\n    \n    for (let t of this.tentacles) {\n      t.update(this.pos);\n    }\n  }\n\n  display() {\n    noStroke();\n    fill(this.hue, 50, 100, 40);\n    ellipse(this.pos.x, this.pos.y, this.bodySize, this.bodySize * 1.2);\n    for (let t of this.tentacles) {\n      t.display(this.hue);\n    }\n  }\n}\n\nclass Tentacle {\n  constructor(parentPos, parentSize) {\n    this.segments = [];\n    this.numSegments = 15;\n    for (let i = 0; i < this.numSegments; i++) {\n      this.segments.push(parentPos.copy());\n    }\n    this.len = parentSize / this.numSegments;\n  }\n\n  update(parentPos) {\n    this.segments[0] = parentPos.copy();\n    for (let i = 1; i < this.numSegments; i++) {\n      let prev = this.segments[i - 1];\n      let current = this.segments[i];\n      let angle = atan2(current.y - prev.y, current.x - prev.x);\n      current.x = prev.x + cos(angle) * this.len;\n      current.y = prev.y + sin(angle) * this.len + 0.5;\n    }\n  }\n\n  display(hue) {\n    stroke(hue, 60, 100, 60);\n    strokeWeight(2);\n    noFill();\n    beginShape();\n    for (let seg of this.segments) {\n      vertex(seg.x, seg.y);\n    }\n    endShape();\n  }\n}"
  },
  {
    "id": "p5_adv_003",
    "tag": "双极引力场",
    "image": "/image/3.png",
    "code": "let particles = [];\nconst numParticles = 300;\nlet attractor1, attractor2;\n\nfunction setup() {\n  createCanvas(800, 1200);\n  for (let i = 0; i < numParticles; i++) {\n    particles.push(new Particle(random(width), random(height)));\n  }\n  colorMode(HSB);\n}\n\nfunction draw() {\n  background(0, 0, 0, 0.1);\n  attractor1 = createVector(width / 4, height / 2);\n  attractor2 = createVector(mouseX, mouseY);\n  \n  strokeWeight(2);\n  for (let p of particles) {\n    p.attracted(attractor1, 1);\n    p.attracted(attractor2, -1.2);\n    p.update();\n    p.show();\n  }\n}\n\nclass Particle {\n  constructor(x, y) {\n    this.pos = createVector(x, y);\n    this.vel = createVector();\n    this.acc = createVector();\n    this.maxSpeed = 5;\n  }\n\n  attracted(target, polarity) {\n    let force = p5.Vector.sub(target, this.pos);\n    let d = force.mag();\n    d = constrain(d, 5, 100);\n    let strength = (polarity * 15) / (d * d);\n    force.setMag(strength);\n    this.acc.add(force);\n  }\n\n  update() {\n    this.vel.add(this.acc);\n    this.vel.limit(this.maxSpeed);\n    this.pos.add(this.vel);\n    this.acc.mult(0);\n  }\n\n  show() {\n    let angle = this.vel.heading();\n    let hue = map(angle, -PI, PI, 0, 360);\n    stroke(hue, 80, 100, 0.6);\n    point(this.pos.x, this.pos.y);\n  }\n}"
  },
  {
    "id": "p5_adv_004",
    "tag": "柏林噪声流场",
    "image": "/image/4.png",
    "code": "let particles = [];\nlet noiseScale = 0.01;\nlet numParticles = 500;\n\nfunction setup() {\n  createCanvas(800, 1200);\n  for(let i = 0; i < numParticles; i++) {\n    particles[i] = new Particle();\n  }\n  background(0);\n  colorMode(HSB);\n}\n\nfunction draw() {\n  let noiseOffsetX = mouseX * 0.001;\n  let noiseOffsetY = mouseY * 0.001;\n\n  for(let p of particles) {\n    p.update(noiseOffsetX, noiseOffsetY);\n    p.show();\n    p.edges();\n  }\n}\n\nclass Particle {\n  constructor() {\n    this.pos = createVector(random(width), random(height));\n    this.vel = createVector(0, 0);\n    this.acc = createVector(0, 0);\n    this.maxSpeed = 2;\n  }\n\n  update(offsetX, offsetY) {\n    let angle = noise(this.pos.x * noiseScale + offsetX, this.pos.y * noiseScale + offsetY) * TWO_PI * 4;\n    let force = p5.Vector.fromAngle(angle);\n    force.setMag(0.1);\n    this.acc.add(force);\n    \n    this.vel.add(this.acc);\n    this.vel.limit(this.maxSpeed);\n    this.pos.add(this.vel);\n    this.acc.mult(0);\n  }\n\n  show() {\n    let hue = map(this.pos.x, 0, width, 180, 300);\n    stroke(hue, 100, 100, 0.05);\n    strokeWeight(1.5);\n    point(this.pos.x, this.pos.y);\n  }\n\n  edges() {\n    if (this.pos.x > width) this.pos.x = 0;\n    if (this.pos.x < 0) this.pos.x = width;\n    if (this.pos.y > height) this.pos.y = 0;\n    if (this.pos.y < 0) this.pos.y = height;\n  }\n}"
  },
  {
    "id": "p5_adv_005",
    "tag": "递归树",
    "image": "/image/5.png",
    "code": "var angle = 0;\nvar len = 120;\n\nfunction setup() {\n  createCanvas(800, 1200);\n}\n\nfunction draw() {\n  background(10, 20, 30);\n  angle = map(mouseX, 0, width, 0, PI / 2);\n  len = map(mouseY, 0, height, 50, 200);\n  \n  translate(width / 2, height * 0.5); \n  stroke(255);\n  branch(len);\n}\n\nfunction branch(len) {\n  strokeWeight(max(1, len / 10));\n  line(0, 0, 0, -len);\n  translate(0, -len);\n\n  if (len > 4) {\n    push();\n    rotate(angle);\n    branch(len * 0.67);\n    pop();\n\n    push();\n    rotate(-angle);\n    branch(len * 0.67);\n    pop();\n  }\n}"
  },
  {
    "id": "p5_adv_006",
    "tag": "万花尺画板",
    "image": "/image/6.png",
    "code": "var angle = 0;\nvar r = 200;\nvar hue = 0;\n\nfunction setup() {\n  createCanvas(800, 1200);\n  background(0);\n  colorMode(HSB);\n  strokeWeight(2);\n}\n\nfunction draw() {\n  let speed = map(mouseX, 0, width, 0.01, 0.2);\n  let ratio = map(mouseY, 0, height, 0.1, 2);\n  \n  let x = r * cos(angle) + (r * ratio) * cos(angle * 5);\n  let y = r * sin(angle) + (r * ratio) * sin(angle * 5);\n  \n  translate(width / 2, height / 2);\n  stroke(hue, 100, 100, 0.8);\n  point(x, y);\n  \n  angle += speed;\n  hue += 0.5;\n  if (hue > 360) hue = 0;\n}\n\nfunction mousePressed() {\n  background(0);\n}"
  },
  
  {
    "id": "p5_adv_007",
    "tag": "基础平移",
    "image": "/image/7.png",
    "code": "let x = 0;\nlet speed = 2;\n\nfunction setup() {\n  createCanvas(800, 1200);\n}\n\nfunction draw() {\n  background(20, 40, 80);\n  noStroke();\n  fill(255, 204, 0);\n  ellipse(x, height / 2, 50, 50);\n\n  x += speed;\n\n  if (x > width || x < 0) {\n    speed *= -1;\n  }\n}"
  },
  {
    "id": "p5_adv_008",
    "tag": "持续旋转",
    "image": "/image/8.png",
    "code": "let angle = 0;\n\nfunction setup() {\n  createCanvas(800, 1200);\n  rectMode(CENTER);\n}\n\nfunction draw() {\n  background(240, 240, 240);\n  translate(width / 2, height / 2);\n  \n  // 鼠标控制旋转速度\n  let speed = map(mouseX, 0, width, 0.01, 0.2);\n  angle += speed;\n  \n  rotate(angle);\n  \n  stroke(50);\n  strokeWeight(4);\n  fill(100, 150, 250);\n  rect(0, 0, 150, 150);\n}"
  },
  {
    "id": "p5_adv_009",
    "tag": "HSB色彩循环",
    "image": "/image/9.png",
    "code": "let hueValue = 0;\n\nfunction setup() {\n  createCanvas(800, 1200);\n  colorMode(HSB, 360, 100, 100);\n}\n\nfunction draw() {\n  // 色相值随时间变化\n  hueValue += 1;\n  if (hueValue > 360) {\n    hueValue = 0;\n  }\n  \n  background(hueValue, 80, 90);\n  \n  // 绘制一个颜色相反的圆\n  let oppositeHue = (hueValue + 180) % 360;\n  noStroke();\n  fill(oppositeHue, 80, 90);\n  ellipse(width / 2, height / 2, 200, 200);\n}"
  },
  {
    "id": "p5_adv_010",
    "tag": "飘落的雪花",
    "image": "/image/10.png",
    "code": "let snowflakes = [];\n\nfunction setup() {\n  createCanvas(800, 1200);\n  fill(255);\n  noStroke();\n}\n\nfunction draw() {\n  background(0, 0, 20);\n  let t = frameCount / 60;\n\n  // 每帧创建新的雪花\n  for (let i = 0; i < random(5); i++) {\n    snowflakes.push(new snowflake());\n  }\n\n  // 循环雪花\n  for (let flake of snowflakes) {\n    flake.update(t);\n    flake.display();\n  }\n}\n\nclass snowflake {\n  constructor(){\n    this.posX = 0;\n    this.posY = random(-50, 0);\n    this.initialangle = random(0, 2 * PI);\n    this.size = random(2, 5);\n    this.radius = sqrt(random(pow(width / 2, 2)));\n  }\n\n  update(time) {\n    let w = 0.6; // 角速度\n    let angle = w * time + this.initialangle;\n    this.posX = width / 2 + this.radius * sin(angle);\n    this.posY += pow(this.size, 0.5);\n\n    if (this.posY > height) {\n      let index = snowflakes.indexOf(this);\n      snowflakes.splice(index, 1);\n    }\n  }\n\n  display() {\n    ellipse(this.posX, this.posY, this.size);\n  }\n}"
  },
  {
    "id": "p5_adv_011",
    "tag": "弹力小球",
    "image": "/image/11.png",
    "code": "let ball;\n\nfunction setup() {\n  createCanvas(800, 1200);\n  ball = new Ball(width / 2, 50);\n}\n\nfunction draw() {\n  background(220);\n  ball.update();\n  ball.display();\n}\n\nclass Ball {\n  constructor(x, y) {\n    this.position = createVector(x, y);\n    this.velocity = createVector(0, 0);\n    this.acceleration = createVector(0, 0.2); // 重力\n    this.radius = 25;\n    this.restitution = 0.85; // 弹性系数\n  }\n\n  update() {\n    this.velocity.add(this.acceleration);\n    this.position.add(this.velocity);\n\n    if (this.position.y > height - this.radius) {\n      this.position.y = height - this.radius;\n      this.velocity.y *= -this.restitution;\n    }\n  }\n\n  display() {\n    fill(50, 100, 200);\n    noStroke();\n    ellipse(this.position.x, this.position.y, this.radius * 2);\n  }\n}"
  },
  
  {
    "id": "p5_adv_014",
    "tag": "3D光影立方",
    "image": "/image/14.png",
    "code": "function setup() {\n  createCanvas(800, 1200, WEBGL);\n}\n\nfunction draw() {\n  background(10, 10, 20);\n  \n  // 环境光\n  ambientLight(60, 60, 60);\n  // 定向光\n  let dirX = (mouseX / width - 0.5) * 2;\n  let dirY = (mouseY / height - 0.5) * 2;\n  directionalLight(250, 250, 250, -dirX, -dirY, -1);\n  \n  noStroke();\n  specularMaterial(250);\n  shininess(50);\n  \n  translate(0, 0, 0);\n  rotateX(frameCount * 0.01);\n  rotateY(frameCount * 0.01);\n  \n  box(150);\n}"
  },
  {
    "id": "p5_adv_015",
    "tag": "矩阵代码雨",
    "image": "/image/15.png",
    "code": "const sketch = (p) => {\n  let streams = [];\n  let symbolSize = 20;\n\n  p.setup = () => {\n    p.createCanvas(800, 1200);\n    let x = 0;\n    for (let i = 0; i <= p.width / symbolSize; i++) {\n      let stream = new Stream();\n      stream.generateSymbols(x, p.random(-1000, 0));\n      streams.push(stream);\n      x += symbolSize;\n    }\n    p.textSize(symbolSize);\n    p.textFont('monospace');\n  };\n\n  p.draw = () => {\n    p.background(0, 150);\n    streams.forEach(stream => {\n      stream.render();\n    });\n  };\n\n  class Symbol {\n    constructor(x, y, speed, first) {\n      this.x = x;\n      this.y = y;\n      this.speed = speed;\n      this.first = first;\n      this.switchInterval = p.round(p.random(2, 25));\n      // 直接在构造函数中无条件地为符号赋一个初始值。\n      this.value = String.fromCharCode(0x30A0 + p.round(p.random(0, 96)));\n    }\n\n    // 这个方法现在只用于在动画循环中“更新”字符\n    setToRandomSymbol() {\n      if (p.frameCount % this.switchInterval == 0) {\n        this.value = String.fromCharCode(0x30A0 + p.round(p.random(0, 96)));\n      }\n    }\n  }\n\n  class Stream {\n    constructor() {\n      this.symbols = [];\n      this.totalSymbols = p.round(p.random(5, 35));\n      this.speed = p.random(5, 20);\n      this.x = 0;\n    }\n\n    generateSymbols(x, y) {\n      this.x = x;\n      this.symbols = [];\n      let first = p.round(p.random(0, 4)) == 1;\n      for (let i = 0; i <= this.totalSymbols; i++) {\n        let symbol = new Symbol(this.x, y, this.speed, first);\n        this.symbols.push(symbol);\n        y -= symbolSize;\n        first = false;\n      }\n    }\n\n    render() {\n      this.symbols.forEach(symbol => {\n        if (symbol.first) {\n          p.fill(180, 255, 180);\n        } else {\n          p.fill(0, 255, 70);\n        }\n        p.text(symbol.value, symbol.x, symbol.y);\n        symbol.y += symbol.speed;\n        symbol.setToRandomSymbol(); // 调用更新\n      });\n\n      let lastSymbol = this.symbols[this.symbols.length - 1];\n      if (lastSymbol.y > p.height) {\n        this.generateSymbols(this.x, p.random(-500, 0));\n      }\n    }\n  }\n};\n\n// --- 沙盒环境兼容性修复 ---\n// 每次运行时，都先移除旧的p5画布容器（如果存在），再创建一个新的。\n// 这是在iframe沙盒中确保环境干净、避免变量重定义错误的最佳方法。\nconst containerId = 'p5-matrix-container';\nlet oldContainer = document.getElementById(containerId);\nif (oldContainer) {\n  oldContainer.remove();\n}\nlet p5Container = document.createElement('div');\np5Container.id = containerId;\ndocument.body.appendChild(p5Container);\n\n// 将 p5 实例明确附加到我们创建的容器中\nnew p5(sketch, containerId);"
  },
  {
    "id": "p5_adv_016",
    "tag": "随机行走者",
    "image": "/image/16.png",
    "code": "class Walker {\n  constructor(){\n    this.x = width / 2;\n    this.y = height / 2;\n  }\n\n  render() {\n    stroke(255, 100);\n    strokeWeight(2);\n    point(this.x, this.y);\n  }\n\n  step() {\n    let choice = floor(random(4));\n    if (choice === 0) {\n      this.x++;\n    } else if (choice === 1) {\n      this.x--;\n    } else if (choice === 2) {\n      this.y++;\n    } else {\n      this.y--;\n    }\n    this.x = constrain(this.x, 0, width - 1);\n    this.y = constrain(this.y, 0, height - 1);\n  }\n}\n\nlet w;\n\nfunction setup() {\n  createCanvas(800, 1200);\n  w = new Walker();\n  background(0);\n}\n\nfunction draw() {\n  w.step();\n  w.render();\n}"
  }


]
